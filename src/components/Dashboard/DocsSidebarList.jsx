import React, { Fragment, Component } from 'react';
import { Link, withRouter } from 'react-router-dom';
import classNames from 'classnames';
import { lowerCase } from 'change-case';
import { withStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import ListItem from '@material-ui/core/ListItem';
import ListItemText from '@material-ui/core/ListItemText';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import Divider from '@material-ui/core/Divider';
import Collapse from '@material-ui/core/Collapse';
import ChevronDownIcon from 'mdi-react/ChevronDownIcon';
import ChevronUpIcon from 'mdi-react/ChevronUpIcon';
import { DOCS_MENU_ITEMS, DOCS_PATH_PREFIX } from '../../utils/constants';
import docsTableOfContents from '../../autogenerated/docsTableOfContents';

const getDocsSectionFromPathname = pathname => {
  if (!pathname) {
    return null;
  }

  const item = DOCS_MENU_ITEMS.find(({ label }) => {
    if (pathname.startsWith(`${DOCS_PATH_PREFIX}/${lowerCase(label)}`)) {
      return true;
    }

    return false;
  });

  return item ? item.label : null;
};

@withRouter
@withStyles(theme => ({
  toc: {
    marginTop: theme.spacing.double,
    marginBottom: theme.spacing.triple,
  },
  ul: {
    listStyle: 'none',
    paddingInlineStart: `${theme.spacing.double}px`,
    marginTop: theme.spacing.unit / 2,
    marginBottom: theme.spacing.unit,
  },
  link: {
    textDecoration: 'none',
    padding: `0 ${theme.spacing.unit}px`,
  },
  linkActive: {
    color: theme.palette.secondary.main,
  },
  hover: {
    ...theme.mixins.hover,
  },
  header: {
    textTransform: 'uppercase',
    fontWeight: 'bold',
  },
  section: {
    marginBottom: theme.spacing.unit,
  },
  sectionDiv: {
    display: 'flex',
    justifyContent: 'space-between',
  },
  collapse: {
    margin: `${theme.spacing.unit}px 0 ${theme.spacing.double}px 0`,
    padding: `0 ${theme.spacing.double}px`,
    overflowY: 'auto',
    maxHeight: '48vh',
  },
  listItem: {
    listStyle: 'none',
  },
  divider: {
    margin: `${theme.spacing.double}px 0`,
  },
}))
export default class DocsSidebarList extends Component {
  state = {
    currentMenu: null,
    menuOpen: true,
    // eslint-disable-next-line react/no-unused-state
    previousPathname: null,
  };

  static getDerivedStateFromProps(props, state) {
    const { pathname } = props.history.location;
    const currentMenu = getDocsSectionFromPathname(pathname);
    const previousMenu = getDocsSectionFromPathname(state.previousPathname);
    const newState = {
      currentMenu,
      previousPathname: pathname,
    };

    if (currentMenu !== previousMenu) {
      Object.assign(newState, { menuOpen: true });
    }

    return newState;
  }

  renderNode = (node, isRoot = false) => {
    const {
      classes,
      history: { location },
    } = this.props;
    const href = `${DOCS_PATH_PREFIX}/${node.path}`;
    const isLinkActive = location.pathname === href;

    if (!node.children) {
      return null;
    }

    if (node.children && node.children.length) {
      return (
        <Fragment key={node.path}>
          {isRoot && node.prev && <Divider className={classes.divider} />}
          <Typography
            className={classNames(classes.link, classes.hover, {
              [classes.header]: isRoot,
              [classes.linkActive]: isLinkActive,
            })}
            component={Link}
            to={href}>
            {node.data.title}
          </Typography>
          <ul className={classes.ul}>
            {node.children.map(child => (
              <li key={child.path}>{this.renderNode(child)}</li>
            ))}
          </ul>
        </Fragment>
      );
    }

    return (
      <Typography
        className={classNames(classes.link, classes.hover, {
          [classes.linkActive]: isLinkActive,
        })}
        key={node.path}
        component={Link}
        to={href}>
        {node.data.title}
      </Typography>
    );
  };

  handleSectionClick = ({ currentTarget: { name } }) => {
    const { currentMenu, menuOpen } = this.state;

    if (name === currentMenu) {
      this.setState({ menuOpen: !menuOpen });
    } else {
      this.setState({ menuOpen: true });
    }
  };

  render() {
    const { classes } = this.props;
    const { currentMenu, menuOpen } = this.state;

    return (
      <div className={classes.toc}>
        {DOCS_MENU_ITEMS.map(item => (
          <Fragment key={item.label}>
            {item.hasChildren && <Divider />}
            <ListItem
              name={item.label}
              button
              onClick={this.handleSectionClick}
              component={Link}
              to={item.path}
              classes={{ container: classes.listItem }}>
              <ListItemIcon>{<item.icon />}</ListItemIcon>
              <ListItemText primary={item.label} />
              {item.hasChildren &&
                (menuOpen && currentMenu === item.label ? (
                  <ChevronUpIcon />
                ) : (
                  <ChevronDownIcon />
                ))}
            </ListItem>
            <Collapse
              in={item.hasChildren && menuOpen && currentMenu === item.label}>
              <div className={classes.collapse}>
                {docsTableOfContents[lowerCase(item.label)] &&
                  docsTableOfContents[lowerCase(item.label)].children.map(
                    child => this.renderNode(child, true)
                  )}
              </div>
            </Collapse>
          </Fragment>
        ))}
      </div>
    );
  }
}
